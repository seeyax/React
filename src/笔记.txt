
1.React是Web前端框架
  操作DOM思想:
    +操作DOM比较消耗性能[主要原因就是:可能会导致DOM重排(回流)/重绘]
    +操作起来也相对来讲麻烦一些
    +
  数据驱动思想：
    +我们不回再直接操作DOM
    +我们去操作数据[当我们修改了数据，框架会按照相关的数据，让页面重新渲染]
    +框架底层实现视图的渲染,也是基于操作DOM完成的
      +构建了一套 虚拟DOM->真实DOM 的渲染体系
      +有效避免了DOM的重排/重绘
    +开发效率更高、最后的性能也相对较好

2.React框架采用的是MVC体系,Vue框架采用的是MVVM体系;
  MVC:model数据层 + view视图层 + controller控制层   单向数据驱动：数据驱动视图的渲染
    @1 我们需要专业的语法去构建视图(页面):React中是基于jsx语法来构建视图的
    @2 构建数据层：但凡在视图中需要动态处理的(获取需要变化的，不管是样式还是内容),我们都要有对应的数据模型
    @3 控制层：当我们在视图中(或者根据业务需求)进行某些操作的时候,都是去修改相关的数据,然后React框架会按照最新的数据,重新渲染视图,
    以此让用户看到最新的效果

    总结：数据驱动视图的渲染
    视图中的表单内容改变,想要修改数据,需要开发者自己去写代码实现
    "单向驱动"
  MVVM: model数据层 + view视图层 + viewModel数据/视图监听层
   @1 数据驱动视图的渲染：监听数据的更新,让视图重新渲染
   @2 视图驱动数据的更改：监听页面中表单元素内容改变,自动去修改相关的数据

    总结："双向驱动"


JSX构建视图的基础知识
  JSX: javascript and xml 把JS和HTML标签混合在了一起(并不是我们之前玩的字符串拼接)
  @1 vscode如何支持JSX[格式化、快捷提示]……
    +创建的js文件,我们把后缀名设置为jsx即可,这样js文件中就可以支持JSX语法了
    +webpack打包的规则中,也是会对.jsx这类型文件,按照js的方式进行处理的
  @2 在HTML中嵌入JS表达式，需要基于"{}"
    +JS表达式：执行有结果的
  @3 在ReactDOM.createRoot()的时候，不能直接把HTML/body作为根容器，需要指定一个额外的盒子(例如：root)
  @4 每一个构建的视图，只能有一个根节点
    + React给我们提供了一个特殊的节点（标签）React.Fragment<></> 空文档标签
    + 既可以保证了可以只有一个根节点，又不新增一个HTML层级结构
  @5 {} 胡子语法中嵌入不同的值，所呈现出来的特点
    + number/string：值是啥，就渲染出来啥
    + boolean/null/undefined/Symbol/BigInt： 渲染的内容是空
    + 除数组对象外，其余对象一般都不支持在{}中进行渲染，但是也有特殊情况：
      + JSX虚拟DOM对象
      + 给元素设置style行内样式，要求必须写成一个对象格式
    + 数组对象：把数组的每一项都分别拿出来渲染[并不是变为字符串渲染，中间没有逗号]
    + 函数对象：不支持在{}中渲染，但是可以作为函数组件。用<Component/>方式渲染
  @6 给元素设置样式
    + 行内样式：需要基于对象的格式处理，直接写样式字符串会报错
      <h2 style={{color: 'red', fontSize: '20px'}}>我在学习React</h2> // 样式属性要基于驼峰命名法处理
    + 设置样式类名：需要把class替换为className

import React from 'react'; //React语法核心
import ReactDOM from 'react-dom/client'; //构建HTML(WebApp)的核心
// 获取页面中id为root的容器,作为根容器
const root = ReactDOM.createRoot(document.getElementById('root'));
// 基于render方法渲染我们编写的视图,把渲染后内容,全部插入到#root中进行渲染
root.render(
  <div>vfdvf</div>
)

关于JSX底层处理机制
  第一步：把我们编写的JSX语法，编译为虚拟DOM对象[virtualDOM]
    虚拟DOM对象：框架自己内部构建的一套对象体系(对象的相关成员都是React内部规定的)，基于这些属性描述出，我们所构建视图中的DOM节点的相关特性
    @1 基于babel-preset-react-app把JSX编译为React．createElement（．．．）这种格式
      只要是元素节点，必然会基于createElement进行处理
      +React.createElement(ele,props,...children)
        +ele:元素标签名[或组件名]
        +props：元素的属性集合（对象）[如果没有设置过任何的属性，则此值是null]
        +children: 第三个及以后的参数，都是当前元素的子节点
    @2 再把createElement方法执行,创建出virtualDOM[虚拟DOM对象(也有称之为JSX元素、JSX对象、ReactChild对象...)]
      + virtualDOM = {
        $$typeof:Symbol(react.element),
        ref: null,
        key: null,
        type: 标签名[或组件],
        // 存储了元素的相关属性&&子节点信息
        props: {
          元素的相关属性，
          children: 子节点信息[没有子节点则没有这个属性、属性值可能是一个值、也可能是一个数组]
        }
      }
  
  补充：胡子语法中，不能嵌入数组外的其他对象，但是有一个对象是可以直接嵌入的：JSX元素对象[虚拟DOM对象],我们可以直接基于createElement语法构建试图（比较麻烦）

  第二步:把构建的virtualDOM渲染为真实的DOM
    真实DOM：浏览器页面中，最后渲染出来，让用户看见的DOM元素
    基于ReactDOM中的render方法处理的
      v16：
        ReactDOM.render(
          <>...</>
          document.getElementById('root')
        )
      v18:
        const root = ReactDOM.createRoot(document.getElementById('root'))
        root.render(
          <>...</>
        )
  补充说明：第一次渲染页面是直接从virtualDOM->真实DOM；但是后期视图更新的时候，需要经过一个DOM-DIFF的对比，计算出补丁包PATCH（两次视图差异
  的部分），把PATCH补丁包进行渲染

  关于对象的规则设置
    +冻结
      冻结对象：Object.freeze(obj)
      检测是否被冻结： Object.isFrozen(obj) => true/false
      被冻结的对象，不能修改成员值，不能新增成员，不能删除现有成员，不能给成员做劫持[Object.defineProperty()]
    +密封
      密封对象：Object.seal(obj)
      检测是否被密封：Object.isSealed(obj) =>true/false
      被密封的对象：可以修改成员值，但也不能新增成员，不能删除现有成员，不能给成员做劫持[Object.defineProperty()]
    +扩展
      把对象设置为不可扩展：Object.preventExtensions(obj)
      检测是否可扩展：Object.isExtensible(obj)
      被设置为不可扩展对象：除了不能新增成员，其余的操作都可以处理
    被冻结的对象，既是不可扩展的，也是密封的！！同理，被密封的对象，也是不可扩展的


  // React组件化开发
    @1 函数组件
      +创建：在src根目录中，创建一个jsx的文件,就是要创建一个组件；我们在此文件中，创建一个函数，让函数返回JSX视图[或者JSX元素、virtualDOM虚拟对象]；
        这就是创建了一个函数组件
      +导入：基于ES6Module规范，导入创建的组件[可以忽略.jsx后缀名]，然后像写标签一样调用这个组件即可
      +调用组件的时候，我们可以给调用的组件设置（传递）各种各样的属性
       <DemoOne title="dhsj" x={10} data={[10,20]} className="box" style={{fontSize:'16px'}}></DemoOne>
        #1如果设置的属性不是字符串形式，需要基于“{}”进行嵌套
        #2调用组件的时候，我们可以把一些数据/信息基于属性props的方式，传递给组件
      +渲染机制：
        #1 基于babel-preset-react-app把调用的组件转换为createElement格式
        #2 把createElement方法执行，创建出一个virtualDOM对象
        #3 基于root.render把virtualDOM变为真实的DOM，type值不再是一个字符串，而是一个函数
          +把函数执行->DemoOne()
          +把virtualDOM中的props，作为实参传递给函数->DemoOne(props)
          +接收函数执行的返回结果[也就是当前组件的virtualDOM对象]
          +最后基于render把组件返回的虚拟DOM变为真实DOM，插入到#root容器中
      +属性props的处理
        #1 调用组件，传递进来的属性是'只读的',原理是：props对象被冻结了
          +获取：props.xxx
          +修改： props.xxx = xxx ->报错
        #2作用：父组件调用子组件的时候，可以基于属性，把不同的信息传递给子组件，子组件接收响应的属性值，呈现出不同的效果，让组件的复用性更强
        #3虽然对传递进来的属性，我们不能修改，但是可以做一些规则校验
          +设置默认值
            函数组件.defaultProps = {
              x:0，
              ...
            }
          +设置其他规则，例如：数据值格式、是否必传...[依赖于官方的插件: prop-types]
            import PropTypes from 'prop-types'
            函数组件.propTypes = {
              // 类型是字符串、必传
              title: PropTypes.string.isRequired,
              // 类型是数字
              x:PropTypes.number，
              // 多种校验规则中的一个
              y: PropTypes.oneOffType([
                PropTypes.number,
                PropTypes.string
              ])
            }
          传递进来的属性，首先会经历规则校验，不管校验成功还是失败，最后都会把属性给props，如果不符合设定规则，控制台会抛出警告错误(不影响属性值的获取)
          + 如果就想把传递的属性值进行修改，我们可以：
            +把props中的某个属性值复制给其他内容[例如：变量、状态....]
            +我们不直接操作props.xxx = xxx,但是我们可以修改变量/状态值!!
      特点：
        函数组件是静态组件
          第一次渲染组件，把函数执行
            + 产生一个私有的上下文
            + 把解析出来的props[含children]传递进来[但是被冻结了]
            + 对函数返回的JSX元素[virtualDOM]进行渲染
          当我们点击按钮的时候，会把绑定的小函数执行：
            +修改上级上下文中的变量
            +私有变量值发生了改变
            +但是视图不会更新
          =>也就是，函数组件第一次渲染完毕后，组件中的内容，不会根据组件内的某些操作，再进行更新，所以称他为静态组件
          =>除非在父组件中，重新调用这个函数组件[可以传递不同的属性信息]

      动态组件[方法]：
        +类组件
        +Hooks组件(在函数组件中，使用Hooks函数)
    @2 类组件
    @3 Hooks组件：在函数组件中使用React Hooks函数

  插槽机制：
    封装组件的时候，预留插槽位置，内容不需要写
    调用组件的时候，基于双闭合调用方式把插槽信息[子节点信息]，传递给组件，组件内部进行渲染即可
    作用：和属性一样，都是想办法让组件具备更强的复用性
    +传递数据值用属性
    +传递HTML结构，用插槽
  
  import React,{ Component, PureComponent } from 'react'
    +基于ES6Module模块规范导入
  import React...
    +把基于export default到处的内容获取到
  import { Component, PureComponent } from 'react'
    +不是对React对象做解构赋值，而是把基于export function Component(){} 一个个导出的内容，做解析赋值

  创建类组件
    创建一个构造函数(类)
      + 要求必须继承React.Component/PureComponent这个类
      + 我们习惯于使用ES6中的class创建类
      + 必须给当前类设置一个render的方法[放在其原型上]:在render方法中，返回需要渲染的视图
    类：
      + class 
      + new的时候，执行的构造函数
      + this是创建的实例
      + 可以设置私有属性
      + class Parent {
        // new的时候，执行的构造函数[可写可不写：需要接收传递进来的实参信息，才需要设置constructor]
        constructor (x,y) {
          // this ->创建的实例
          console.log(x, y);
          // total 是私有属性
          this.total = x + y
          // 私有属性
          this.getNum = function () {}
        }
        num = 200; //等价于this.num = 2000 给实例设置私有属性
        sum1 =  () => {} // 这是加私有属性
        sum2 () {
          // 类似于sum = function sum() {} 不是箭头函数
          // 它是给parent.prototype上设置公共的方法[sum2函数是不可枚举的]
        }
        // 把构造函数当做一个普通对象，为其设置静态的私有属性方法 Parent.xxx 也是不可枚举的
        static average () {
        }
      }
      Parent.prototype.y = 2000 // 在外部手动给构造函数原生上设置公共的属性
      class Parent extends React.Component {
        constructor () {
          super() // 等价于把 React.Component.call(this) 执行
          // this.props = undefined this.context = undefined  this.refs = {} ...
        }
      }
      let p = new Parent(10,20)
      console.log(p);
      
      + 基于extends实现继承
        @1 首先基于call继承 React.Component.call(this)  // this -> Parent类的实例p
          function Component(props,context,updater){
            this.props = props
            this.context = context
            this.refs = emptyObject
            this.updater = updater | ReactNoopUpdateQueue
          }
          给创建的实例p设置了4个私有属性：props/context/refs/updater
        @2 再基于原型继承 Parent.prototype._proto_ === React.Component.prototype
          实例->Parent.prototype->React.Component.prototype->Object.prototype
          实例除了具备Parent.prototype提供的方法之外，还具备了React.Component.prototype原型上提供的方法：isReactComponent、setState、forceUpdate
        @3 只要自己设置了constructor,则内部第一句话一定要执行super()
    
    从调用类组件[new NewVotes({...})]开始，类组件内部发生的事情：
      1. 初始化属性 & 规则校验
        先规则校验，校验完毕后，再处理属性的其他操作
        方案一：
        constructor (props) {
          super(props) // 会把传递进来的属性挂载在this实例上
          console.log(this.props);
        }
        方案二： 即便我们自己不再constructor中处理[或者constructor都没写]，在constructor处理完毕后，
                React内部也会把传递的props挂载在实例上，所以在其他的函数中，只要保证this是实例，就可
                以基于this.props获取传递的属性！
                  +同样this.props获取的属性对象也是被冻结的{只读的} Object.isFrozen(this.props) ->true
        设置规则校验
      2. 初始化状态
        状态：后期修改状态，可以触发视图的更新
        需要手动初始化，如果我们没有去做相关的处理，则默认会往实例上挂载一个state，初始值是null =》this.state = null
        手动处理：
          state = {
            supNum: 10,
            oppNum: 5
          }
        修改状态，控制视图更新
          this.state.xxx = xxx: 这种操作仅仅是修改了状态值，但是无法让视图更新
        想让视图更新，我们需要基于React.Component.prototype提供的方法操作：
          @1 this.setState(partialState, callback) 既可以修改状态，也可以让视图更新
            partialState: 部分状态
            this.setState({
              xxx:xxx
            })
          @2 this.forceUpdate() 强制更新
      3.触发周期函数 componentWillMount()[钩子函数]：组件第一次渲染之前
        钩子函数：在程序运行到某个阶段，我们可以基于一个处理函数，让开发者在这个阶段做一些自定义的事情
          + 此周期函数，目前是不安全的[虽然可以用，但是未来可能要被移除了，所以不建议使用]
        + 如果开启了React.StrictMode[React的严格模式]，则我们使用UNSAFE_componentWillMount 这样的周期函数，控制台会直接抛出红色警告错误
        React.StrictMode VS use strict
          + use strict: JS的严格模式
          + React.StrictMode: React的严格模式，它会去检查React中一些不规范的语法，或者是一些不建议使用的API等
      ４.触发render周期函数：渲染
      5.触发componentDidMount周期函数: 第一次渲染完毕
        + 已经把virtualDOM变为真实DOM了[所以我们可以获取真实DOM了]
    组件更新的逻辑[第一种：组件内的状态被修改,组件会更新]
      1.触发shouldComponentUpdate()周期函数:是否允许更新
        shouldComponentUpdate(nextProps, nextState) {
        // console.log(this); // this是当前实例
        // nextState: 存储要修改的最新状态
        // this.state: 存储的还是修改前的状态[此时状态还没有改变]
        console.log(this.state, nextState);
        // 此周期函数需要返回true/false
        // 返回true: 允许更新,会继续执行下一步操作
        // 返回false: 不允许更新,接下来啥都不处理
        return true
      }
      2.触发 componentWillUpdate周期函数：更新之前
        + 此周期函数也是不安全的
        + 在这个阶段，状态/属性还没有被修改
      3.修改状态值/属性值[让this.state.xxx改为最新的值]
      4.触发render 周期函数：组件更新
        + 按照最新的状态/属性，把返回的JSX编译喂virtualDOM
        + 和上一次渲染出来的virtualDOM进行对比[DOM-DIFF]
        + 把差异的部分进行渲染[渲染为真实的DOM]
      5.触发 componentDidUpdate 周期函数：组件更新完毕
      特殊说明：如果我们是基于this.forceUpdate() 强制更新视图，会跳过shouldCOmponentUpdate周期函数
               的校验，直接从componentWillUpdate开始进行更新[也就是：视图一定会更新]
    组件更新的逻辑[第二种：父组件更新，触发的子组件更新] 
      1. 触发componentWillReceiveProps 周期函数：接收最新属性之前
        + 周期函数是不安全的
        componentWillReceiveProps(nextProps) {
          // this.props:存储的之前的属性
          // nextProps: 传递进来的最新属性值
          console.log('componentWillReceiveProps',this.props, nextProps);
        }
      2.触发 shouldComponentUpdate 周期函数
      3.触发 componentWillUpdate周期函数
      4.修改状态值/属性值[让this.state.xxx改为最新的值]
      5.触发render 周期函数：组件更新
      6.触发 componentDidUpdate 周期函数：组件更新完毕


  父子组件嵌套，处理机制上遵循深度优先原则：父组件在操作中，遇到子组件，一定是把子组件处理完，父组件才能继续处理
    父组件的第一次渲染：
      父willMount -> 父render[子willMount -> 子render -> 子didMount] -> 父didMount
    父组件更新：
      父shouldUpdate -> 父willUpdate -> 父render[子WillReceiveProps -> 子shouldUpdate -> 子willUpdate -> 子render -> 子didUpdate] ->父didUpdate
    父组件销毁：
      父willUnmount -> 处理中[子willUnmount -> 子销毁] -> 父销毁


  组件卸载的逻辑
    1.触发 componentWillUnmount周期函数： 组件销毁之前
    2.销毁


  render函数在渲染的时候, 如果type是：
    + 字符串：创建一个标签
    + 普通函数，把函数执行，并且把props传递给函数
    + 构造函数：把构造函数基于new执行[也就是创建类的一个实例],也会把解析出来的props传递过去
      + 每调用一次类组件都会创建一个单独的实例
      + 把在类组件中编写的render函数执行，把返回的jsx[virtualDOM]当作组件的视图进行渲染

  函数组件是"静态组件":
    + 组件第一次渲染完毕后，无法基于"内部的某些操作"让组件更新[无法实现'自更新']；但是，如果调用它的父组件更新了，那么
      相关的子组件也一定会更新[可能传递最新的属性值进来]
    + 函数组件具备：属性……[其他状态内容几乎没有]
    + 优势：比类组件处理的机制简单，这样导致函数组件渲染速度更快
  类组件是"动态组件"：
    + 组件在第一次渲染完毕后，除了父组件更新可以触发其更新，我们可以通过this.setState修改状态，或者this.forceUpdate等方式，
      让组件实现'自更新'
    + 类组件具备：属性、状态、周期函数、ref……[几乎组件应该有的东西它都是具备的]
    + 优势：功能强大

  浅比较：只比较对象的第一级，对于深层次内容，不会再进行比较
    + 先比较对象成员的数量，如果数量都不一致，那么两个对象肯定是不一样的
    + 在循环成员逐一进行比较
  
  REF:
    受控组件：基于修改数据/状态：让视图更新，达到需要的效果 [推荐]
    非受控组件：基于ref获取DOM元素，我们操作DOM元素,来实现需求和效果
      基于ref获取DOM元素的语法
        1.给需要获取的元素设置ref='xxx',后期基于this.refs.xxx去获取相应的DOM元素[不推荐使用: 在React.StrictMode模式下会报错]
          <h2 ref="titleBox"></h2>
          获取:this.refs.titleBox
          
        2.把ref属性值设置为一个函数
          ref={x=>this.xxx = x}
            + x是函数的形参:存储的就是当前DOM元素
            + 然后我们把获取的DOM元素'x'直接挂载在到实例的某个属性上(例如:box2)
          获取: this.xxx

        3.基于React.createRef()方法创建一个ref对象 
          this.xxx = React.createRef(); // => this.xxx = {current:null}
          ref={REF对象(this.xxx)}
          获取: this.xxx.current

        原理:在render渲染的时候,会获取virtualDOM的ref属性
          + 如果属性值是一个字符串,则会给this.refs增加这样的一个成员,成员值就是当前的DOM元素
          + 如果属性值是一个函数,则会把函数执行,把当前DOM元素传递给这个函数[x->DOM元素],而在函数执行的内部,
            我们一般都会把DOM元素直接挂载到实例的某个属性上
          + 如果属性值是一个REF对象,则会把DOM元素赋值给对象的current属性

    给元素标签设置ref，目的：获取对应的DOM元素
    给类组件设置ref,目的：获取当前调用组件创建的实例[后续可以根据实例获取子组件中的相关的信息]
    给函数组件设置ref，直接报错：Function components cannot be given refs. Attempts to access this ref will fail
      + 但是我们让其配合 React.forwardRef 实现ref的转发
      + 目的：获取函数子组件内部的某个元素
    
  this.setState
    this.setState([partialState],[callback])
      [partialState]:支持部分状态更改
        this.setState({
          x:100 //不论总共有多少状态，我们只修改了x,其余的状态不动
        })
      [callback]:在状态更改/视图更新完毕后触发执行[也就是说只要执行了setState,callback一定会执行]
        + 发生在componentDidUpdate周期函数之后[DidUpdate会在任何状态更改后都触发执行；而回调函数方式，可以在
          指定状态更新后处理一些事情]
        + 特殊：即便我们基于shouldComponentUpdate阻止了状态/视图的更新，DidUpdate周期函数肯定不会执行了，但是
          我们设置的这个callback回调函数依然会被触发执行
      类似于Vue框架中的$nextTick!!

    在React18中，setState操作都是异步的[无论是在哪执行，例如:合成事件、周期函数、定时器……]
      目的：实现状态的批处理[统一处理]
        + 有效减少更新次数，降底性能消耗
        + 有效管理代码执行的逻辑顺序
      原理：利用更新队列[updater]机制来处理的
        + 在当前相同的时间段内[浏览器此时可以处理的事情中]，遇到setState会立即放入到更新队列中
        + 此时状态/视图还未更新
        + 当所有的代码操作结束，会'刷新队列' [通知更新队列中的任务执行]：把所有的放入setState合并在一起执行，
          只触发一次视图更新[批处理操作]
 







